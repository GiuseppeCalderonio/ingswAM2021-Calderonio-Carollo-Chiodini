
MATCH CREATION
the first phase is the creation of a match, it is done from the first player that connect to the server,
and him decides the total number of players of the game
if another player try to connect to the server while the first one is still deciding the total number,
he gets kicked off, because there is no any game existing in that moment

CLIENT                                                   SERVER
send the number of players
"{"cmd" : "set_players", "number_of_players" : int}"
----------------------------------------->


              if set_players is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String>}"
<----------------------------------------------


              if size is not between 1 and 4
         "{"message" : "the size is not between 1 and 4" , "possibleCommands" : [set_players]}"
<----------------------------------------------


                else
                "{"message" : "ok, start with the login" , "possibleCommands" : [login]}"
<----------------------------------------------


LOGIN
the second phase is the login, it requires that a match is been created, and every player from 1 to size
have to send his nickname, then the game will decide if it is correct or not
every nickname is ok, it requires that is unique and that is not the empty string
note that if a player try to connect and there are more than (size) connection active
(the server will store a list of sockets) the player will kicked off

CLIENT                                                   SERVER
send the nickname
"{"cmd" : "login", "nickname" : String}"
---------------------------------------------------->


              if login is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String>}"
<----------------------------------------------


            if nickname.equals("")
         "{"message" : " the nickname can't be the empty string" , "possibleCommands" : [login]}"
<------------------------------------------------------


            else if nickname is contained in the list of nicknames
            "{"message" : "nickname selected is already taken" , "possibleCommands" : [login]}"
<------------------------------------------------------


            if number of players (see MATCH CREATION) == 1
            "{"message" : "login completed successfully" , "ignorePossibleCommands" : true}"
<------------------------------------------------------


            else
            "{"message" : "login completed successfully, wait for other players to join" , "possibleCommands" : []}"
<------------------------------------------------------


            if the login is done from everyone send all the state (own leader cards of the player and turn position)
            create a game, eventually a single game

  "{"message" : "the game initialization start! decide 2 different leader cards to discard" ,
        "possibleCommands" : [initialize_leaderCards] ,
       "position" : x ,
        "leaderCards" : List<ThinLeaderCard>,    //a ThinLeaderCard is a class composed by two attributes: int:victoryPoints, Resource:resource. We use it in order to facilitate the                                                                         //communication
        "code" = 1
        "serialize" = true
        }"
<------------------------------------------------------------


INITIALISATION
the third phase is the initialisation, in which every player must decide the leader cards that
he want to discard and the resources that he want to get
the leader cards will be numerated from 1 to 4, and the player have to send 2 different integers
In local based on the position of the player (first, second, third, fourth) will be managed the number of resources
that a player can choose (1째= none, 2째 and 3째 = 1, 4째 = 2)
the resources will be stored in the warehouse automatically, then the player could move them

CLIENT                                                   SERVER
send the two leader cards to discard
"{"cmd" : "initialise_leaderCards", "firstCard" : int , "secondCard" : int }"
---------------------------------------------------->


              if initialise_leaderCards is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String>}"
<----------------------------------------------


                  if !(1<= firstCard <=4) || !(1<= secondCard <=4)
       "{"message" : "one of the cards index is not between 1 and 4" , "possibleCommands" : [initialise_leaderCards]}"
<------------------------------------------------------------


            else if ( x == y)
       "{"message" : "the two cards indexes are equals" , "possibleCommands" : [initialise_leaderCards]}"
<------------------------------------------------------------


            else
            "{"message" : "ok, choose your resources" , "possibleCommands" : [initialise_resources]}"
<-----------------------------------------------------------


send the resources to choose (based on the position)
"{"cmd" : "initialise_resources", "firstResource" : Resource, "secondResource" : Resource}"
---------------------------------------------------->


              if initialise_resources is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String>}"
<----------------------------------------------


                   if resources are not compatible with the position
       "{"message" : "you have chosen too much or not anymore resources" , "possibleCommands" : [initialise_resources]}"
<------------------------------------------------------------


            else
     "{"message" : "ok, now wait that everyone decides his resources and leader cards, then the game will start" , "possibleCommands" : []}"
<-----------------------------------------------------------


                 if everyone did the initialization, send all the state
                 send basically everything
                 send to every player market card, market marble, eventually the soloToken, leader cards, the state of every player

   "{"message" : "the game start! it is the turn of [actualPlayer], decide your action:" ,
        "possibleCommands" : List<String> ,// depending if is the turn of the player or not
        "cardsMarket" : DevelopmentCard[][] ,
        "marbleMarket" : Marble[][] ,
        "lonelyMarble" : Marble ,
        "soloToken" : SoloToken ,
        "actualPlayer" : ThinPlayer ,   //ThinPlayer is a class that we use in order to facilitate the communication
        "opponents" : List<ThinPlayer>
        "code" : 2 ,
        "serialize" = true}"
<-----------------------------------------------------------


now the real game starts

SHIFT RESOURCES
this operation is the most particular, because there is no limit to it, it can be done always
during the turn without limitations

CLIENT                                                   SERVER
shift resources
"{"cmd" : "shift_resources", "source" : int, "destination" : int}"
------------------------------------------------------------>


              if shift_resources is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String>}"
<----------------------------------------------


          if(!checkShelfSelected(source) || !checkShelfSelected(destination)) that means that a shelf does not exist
          "{"message" : "error, one of the shelf selected does not exist" , "possibleCommands" : List<String> }"
<------------------------------------------------------------

          if(!shiftResources(source, destination)) that means that a shift is not possible
          "{"message" : "error, you can't do this kind of shift" , "possibleCommands" : List<String> }"
<------------------------------------------------------------

          else send a message to every player
          and after send all the warehouse changed, and the new faith track in broadcast
          broadcast
          "{
                "ignorePossibleCommand" : true ,
                "actualPlayer" : ThinPlayer ,
                "opponents" : List<ThinPlayer>
                "code" : 3 ,
                "serialize" : true
          }"
<------------------------------------------------------------

          then send
          "{"message" : "ok, shift done correctly" , "possibleCommands" : List<String>}"
<------------------------------------------------------------


            if(shiftResources(source, destination) throws EndGameException) [ONLY SinglePlayer!]
            and you lost
          "{ "message" : "you lost... you gained [getActualPlayer.getVictoryPoints()]", "possibleCommands" : [] }"
<------------------------------------------------------------


CHOOSE MARBLES
this operation can be done only once during the turn, and it can also send his
dimension that can be row or column

CLIENT                                                   SERVER
choose marbles
"{"cmd" : "choose_marbles", "dimension" : String, "index" : int}"   //dimension is "row" or "column"
------------------------------------------------------------>


              if choose_marbles is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------

                if(!command.dimension.equals("row") && !command.dimension.equals("column") )
                if the dimension is not equals to "row" or "column"
          "{"message" : "the dimension chosen is not correct, it should be \"row\" or \"column\" " , "possibleCommands" : List<String>}"
<------------------------------------------------------------

                if the index is not correct (1,3 for row or 1,4 for column)
          "{"message" : "the index is not correct" , "possibleCommands" : List<String>}"
<------------------------------------------------------------

                         if you choose a row or a column that contains only white marbles but you don't own any leaderCards WhiteMarble
           "{"message" : "action completed, any resource got added" , "possibleCommands" : List<String>}"
<------------------------------------------------------------

...server gets the list of marbles...

THIS PART IS DONE ONLY IN CASE THERE ARE 2 WHITE MARBLE LEADER CARDS

                if actual player owns 2 white marbles leader cards
                and selected a column\row with almost 1 white marble
        "{"message" : "you own 2 white marble leader cards , choose for each white marble how to convert it" ,
             "possibleCommands" : [choose_leaderCards] ,
        "marbles" : int }"  //size of whiteMarbles to convert
<------------------------------------------------------------


choose leader card to use                                                    //CHOOSE LEADER CARDS
"{"cmd" : "choose_leaderCards", "indexes" : int[]}"
------------------------------------------------------------>


                         if choose_leaderCards is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


                if (!changeWhiteMarble(marbles, index)) the index is not between 1 and 2
          "{"message" : "one of the leader card selected does not exist" , "possibleCommands" : List<String> }"
<------------------------------------------------------------


 ...server calls convert...

            if the player have to insert in warehouse some resources converted
          "{"message" : "you gained [CollectionResources], decide how to place them into the warehouse" ,
          "possibleCommands" : [insert_in_warehouse] ,
          "selectForPlacement" : List<Resource> ,
          "code" : 4 ,
          "serialize" : true
          }"
<------------------------------------------------------------


select shelf                                                                                            //INSERT IN WAREHOUSE
"{"cmd" : "insert_in_warehouse", "shelves" : int[]}"
------------------------------------------------------------>


              if insert_in_warehouse is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


                if (!checkShelfSelected(shelves[i])) one of the shelves selected does not exist
          "{"message" : "one of the shelf selected does not exist" , "possibleCommands" : [insert_in_warehouse]}"
<------------------------------------------------------------


            else

                    broadcast
                    "{
                          "ignorePossibleCommand" : true ,
                          "actualPlayer" : ThinPlayer ,
                          "opponents" : List<ThinPlayer>
                          "marbleMarket" : Marble[][] ,
                          "lonelyMarble" : Marble ,
                          "code" : 5 ,
                          "serialize" : true
                    }"

          finally send
          {"message" : "resources added correctly" : "possibleCommands" : List<String> }
<------------------------------------------------------------


            if(insertInWarehouse(..) throws EndGameException) [ONLY SinglePlayer!]
            and you won
          "{"message" : "you won! you gained [getActualPlayer.getVictoryPoints()]" , "possibleCommands" : []}"
<------------------------------------------------------------


            else if(insertInWarehouse(..) throws EndGameException) [ONLY SinglePlayer!]
            and you lost
          "{"message" : "you lost... you gained [getActualPlayer.getVictoryPoints()]" , "possibleCommands" : []}"
<------------------------------------------------------------


BUY CARD
this operation can be done only once during the turn, with this method the player select and buy
one development card present in the market

CLIENT                                                   SERVER

choose card
"{"cmd" : "buy_card", "color" : CardColor, "level" : int}"
------------------------------------------------------------>


              if buy_card is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


              if (!CheckBuyCard(level, color))
"{"message" : "error, one of these things could be the motivation :"
                            "(1) you have selected a level not between 1 and 3, "
                            "(2) you have selected a color that doesn't exist, "
                            "(3) you have selected an empty deck of cards, "
                            "(4) you can't buy the card because you can't afford it, "
                            "(5) you can't place the card selected into the dashboard", "possibleCommands" : List<String>}"
<------------------------------------------------------------


          else
          "{"message" : "deck selected is available, now decide where you want to place the card in your dashboard" ,
           "possibleCommands" : [select_position]}"
<------------------------------------------------------------


select position                                                                                                   //SELECT POSITION
"{"cmd" : "select_position", "dashboardPosition" : int}"
------------------------------------------------------------>

     if select_position is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


                         if (!CheckPlacement(card, dashboardPosition)
      "{"message" :  "error, one of these things could be the motivation :"
                            "1) the position selected is not between 1 and 3"
                            "2) the position selected does not allow the card placement", "possibleCommands" : List<String> }"
<-----------------------------------------------------------


                else
          "{"message" : "now select the warehouse resources to pay the card" , "possibleCommands" : List<String>}"
<------------------------------------------------------------


select resources from warehouse                                       //SELECT RESOURCES FROM WAREHOUSE
"{"cmd" : "select_resources_from_warehouse" , "toPayFromWarehouse" :  CollectionResources}
------------------------------------------------------------>


              if select_position is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


               if the check warehouse resources returns false
          "{"message" : "error,you have selected an incorrect amount of resources" , "possibleCommands" : List<String>}"
<------------------------------------------------------------


               else

               broadcast
                   "{
                         "ignorePossibleCommand" : true ,
                         "actualPlayer" : ThinPlayer ,
                         "opponents" : List<ThinPlayer> ,
                         "marbleMarket" : Marble[][] ,
                         "lonelyMarble" : Marble ,
                         "code" : 6 ,
                         "serialize" : true
                    }"

               then send to the actual player
          "{"message" : "card bought and placed correctly" , "possibleCommands" : List<String>}"
<------------------------------------------------------------


CASE PRODUCTION
production
"{"cmd" : "production"}"
------------------------------------------------------------>


              if production is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


          else write the production type that you want activate
          "{"message" : "write the production type that you want activate" , "possibleCommands" : [basic_production, normal_production, leader_production, end_production]}"
<------------------------------------------------------------



             CASE BASIC PRODUCTION
             "{"cmd" : "basic_production" , "toPayFromWarehouse" : CollectionResources , "toPayFromStrongbox" : CollectionResources , "output" : Resource}"
             ------------------------------------------------------------>


              if basic_production is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
    <-----------------------------------------------------------


                          if the check activate basic production returns false
             "{"message" : ""error, one of these things could be the motivation :"
                            "1) you haven't chosen the right amount of resources (you have to choose 2 resources in input and 1 in output)"
                            "2) you don't own the chosen resources in your storage"" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------


                         else

                         broadcast
                       "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                       "code" : 3 ,
                       "serialize" : true
              }"
                     "{"message" : "basic production activated" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------



             CASE NORMAL PRODUCTION
             "{"cmd" : "normal_production" , "position" : int , "ToPayFromWarehouse" : CollectionResources}"
             ------------------------------------------------------------>


              if normal_production is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
    <-----------------------------------------------------------


                  if an error occurs
                         "{"message" : "error, one of these things could be the motivation :"
                            "(1) you haven't enough resources, "
                            "(2) you already have selected this production, "
                            "(3) the production selected doesn't exist"
<------------------------------------------------------------


                   else
                     broadcast
                      "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                       "code" : 3 ,
                       "serialize" : true
              }"
                     "{"message" : "normal production activated" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------



             CASE LEADER PRODUCTION
             "{"cmd" : "leader_production" , "position" : int, "fromWarehouse" boolean}"
             ------------------------------------------------------------>


              if leader_production is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
    <-----------------------------------------------------------


                         if an error occurs
             "{"message" : "error, one of these things could be the motivation :"
                            "(1) you haven't enough resources, "
                            "(2) you already have selected this production, "
                            "(3) the production selected doesn't exist"
<------------------------------------------------------------


                    else

                      broadcast
                       "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                       "code" : 3 ,
                       "serialize" : true
              }"
                     "{"message" : "leader production activated" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------



             CASE END PRODUCTION
             "{"cmd" : "end_production"}"
             ------------------------------------------------------------>


              if end_production is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
    <-----------------------------------------------------------


                     else
                     "{"message" : "production finished", "possibleCommands" : List<String>}"
             <------------------------------------------------------------


ACTIVATE LEADER CARD

"{"cmd" : "leader_action"}"
------------------------------------------------------------>


              if leader_action is not a possible command in this phase of game
         "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
<-----------------------------------------------------------


              else
         "{"message" : "choose the leader action to do" , "possibleCommands" : [leader_action_activate, leader_action_discard] }"
<-----------------------------------------------------------


            CASE ACTIVATE
            "{"cmd" : "activate_card", "toActivate" : int}"
            ------------------------------------------------------------>


              if activate_card is not a possible command in this phase of game
            "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
            <-----------------------------------------------------------


            if (!checkLeaderCard(toActivate)) the leader card selected does not exist
            "{"message" : "error, the leader card selected does not exist" , "possibleCommands" : List<String> }"
            <------------------------------------------------------------

            if(!activateLeaderCard(toActivate)) the leader card is already activated or
            the player doesn't meet the requirements to activate it
            "{"message" : "the leader card is already active or you don't meet the requirements to activate it" , "possibleCommands" : List<String>}"
            <------------------------------------------------------------


                    else
                       broadcast
                       "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                       "code" : 3 ,
                       "serialize" : true
              }"
                     "{"message" : "leader card activated" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------


            CASE DISCARD
            "{"cmd" : "discard_card", "toDiscard" : int}"
            ------------------------------------------------------------>


              if activate_card is not a possible command in this phase of game
            "{"message" : "this command is not available in this phase of the game" , "possibleCommands" : List<String> }"
            <-----------------------------------------------------------


            if (!checkLeaderCard(toDiscard)) the leader card selected does not exist
            "{"message" : "error, the leader card selected does not exist" , "possibleCommands" : List<String>}"
            <------------------------------------------------------------

            if(!discardLeaderCard(toDiscard)) the leader card is already activated
            "{"message" : "the leader card is already activated " , "possibleCommands" : List<String>}"
            <------------------------------------------------------------


                    else
                      broadcast
                       "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                       "code" : 3 ,
                       "serialize" : true
              }"
                     "{"message" : "leader card discarded" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------


END OF TURN

             "{"cmd" : "end_turn"}"
            ------------------------------------------------------------>

             if it is a Game with multiple players
                         "{"message" : "your turn is finished, now it's the turn of "nickname" " , "possibleCommands" : []}"
<------------------------------------------------------------


             else //single game
                         broadcast
                         "{
                       "ignorePossibleCommand" : true ,
                       "actualPlayer" : ThinPlayer ,
                       "opponents" : List<ThinPlayer> ,
                                "cardsMarket" : DevelopmentCard[][] ,
                                "soloToken" : SoloToken
                       "code" : 7 ,
                       "serialize" : true
              }"
                     "{"message" : "your turn is finished" , "possibleCommands" : List<String>}"
             <------------------------------------------------------------


