main()
{
boolean azioneNorm;
boolean azioneLead;

inizializzazione
scegli il numero

while(azioneNorm == false || azioneLead == false){
input = "scrivi il comando: "
}


switch(input):
  case: compro carta
  manda info ----> (String: comando)
	if(azioneNorm != true)
        scegli livello e colore //piccolo controllo in locale
        manda info ---->(int: livello, CardColor: color)
        ritorna info <----(se la carta è disponibile o meno, o se si hanno abbastanza risorse)
		scegliere dove voler mettere la carta
		manda info ----> (int: position)
		ricevi info <----(se l'inserimento è possinbile)
		scegli risorse da prendere dal magazzino
		manda info---> (CollectionResources: warehouseResources)
		ritorna info <---- (se si ha abbastanza risorse nel magazzino, o nello strongbox, o in generale)
		if(non ci sono errori) azioneNorm = true;
		else niente;
	else
		messaggio errore
   case: compra dal mercato
	if (azioneNorm != true)
	scelgo se colonna o riga //controllo in locale
	scelgo la colonna/ riga //controllo in locale
	mando info ---->(String: "compra risorse", String: riga/colonna, int: indice)
	ricevo info <----(se l'operazione è ok, ma dovrebbe, e se ho 2 carte leader)
	if(1 carta leader) //server se le converte tutte nell'unica disponibile
	if(2 carte leader)
		forall (white marbles chosen)
			seleziona carta da usare (compresi fra 1 e 2) //controllo in locale
		    manda info ---->(int: carta da usare) //server converte
		    ricevi info <----
		-----------------
		qui mi arriva il buffermarble già completo, io lo devo trasformare
		converto le biglie in risrse
		qui ricevo vettore di risorse, già filtrata senza biglie bianche nè rosse
	forall(types of resources : biglie convertite)
		inserire index di shelf e tipo di risorsa //controllo in locale non esaustivo
		manda info ---->(int: indice, Resource: type)
		ricevi info <----(se il tipo è ok oppure l'indice di shelf è giusto)
	azioneNorm = true
   case: scambiare risorse in magazzino
	scelgo source e destination
	if(source >3 || destination >3)
		chiedi numero di risorse da spostare("Quest'azione sposta una risorsa da source a destination")
		manda info ---->(String: "scambiare risorse", int: source, int: destination)
		ritorno info <----(se ok o meno)
	else
	    ("quest'azione sposta tutte le risorse da source a destination e viceversa, vuoi continuare?")
		mando info ---->(String: "shiftare risorse", int: source, int: destination)
		ritorno info <----
   case: produzione
	if(azioneNorm != true)
	boolean activated[5] = tutti false;

	input = "scrivi il tipo di produzione"
	manda stringa ---->
	    case: "Produzione Base"
	        if(activated[0] == true) break;
	        chiedi 1° risorsa in input
	        chiedi se vuole prenderla dal warehouse
	        manda info ---->(CollectionResources: toPay, boolean: warehouse?)
	        ritorna info <----(se contengo le risorse nel punto selezionato)
	        chiedi 2° risorsa in input
            chiedi se vuole prenderla dal warehouse
            manda info ---->(CollectionResources: toPay, boolean: warehouse?)
            ritorna info <----(se contengo le risorse nel punto selezionato, sommate a quella scelta prima)
            chiedi risorsa in output
            manda info ----> (Resource: ouput)
            ritorna info <---- (se è tutto ok, ma dovrebbe)
            activated[0] = true
        case "Produzione normale"
            chiedi numero della produzione
            if(activated[position] == true) break;
            manda info ----> (int: position)
            ritorna info <----(se ho le risorse necessarie totali per attivare)
            chiedi risorse da prendere dal warehouse
            manda info ----> (CollectionResources: toPayFromWarehouse)
            ritorna info <---- (se le risorse sono giuste)
            activated[position] = true;
        case "Produzine leader"
            chiedi il numero della produzione leader da fare [1 o 2]
            if(activated[position + 3] == true) break;
            manda info ----> (int: position + 3)
            ritorna info <----(se ho la risorsa per attivare, o se ho la carta)
            chiedi se prendere risorsa da warehouse
            manda info ----> (boolean: warehouse?)
            ritorna info <---- (se le risorse sono giuste)
            activated[position + 3] = true;
        case "Fine Produzioni"
            break;

--------------------------------------------------------------
	scegli le produzioni[0,1,2,3,4,5]
	basic/first/second/third/first leader/ second leader
	forall (produzione scelta) //
		if(produzione scelta == 0)
			chiedi risorse in input
			manda info ----> (CollectionResources: toPay)
			ritorna info <----(se contengo le risorse)
			chiedi risorse in output
			chiedi risorse da prendere da warehouse
			manda info ---->(String: "attiva produzione", int: prod. scelta,CollectionResources: toPayFromWarehouse, in output:Resource)
			ricevi info <----(se contengo le risorse nel warehouse)
		if(produzione scelta tra 1 e 3)
			scegli risorse da pagare dal warehouse
			manda info ---->(String: "attiva produzione", int: prod. scelta, CollectionResources toPayFromWarehouse )
			ricevi info <----
		if(pr. scelta [4;5])
			(se 4, attivi 4, se 5 attivi 5)
			scegli output
			scegli se prendere input da Magazzino
			manda info ---->(String: "attiva produzione", int: prod. scelta, Resource: output, boolean: fromWarehouse)
			riceve info <----
--------------------------------------------------
	indica fine produzioni
	manda info ---->(String: "fine")
	ricevi info <----
	azioneNorm = true
   case: azione leader
	if(azioneLeader != true)
	scegli la carta su cui fare l'azione [1;2]
	scegli se attivare o scartare [true,false]
	manda info ----> (int: carta da attivare, boolean: attivare?)
	ricevi info <----
	azioneLead = true
   case: fine turno
	manda info ---->(String: "fine turno")
	ricevi info <----
}


MESSAGES CLIENT--> SERVER
1
send the number of players
"{"cmd" : "set_players", "size" : x}"
---------------------------------------------------->
2
send the nickname
"{"cmd" : "login", "nickname" : str}"
---------------------------------------------------->
3
send the two leader cards to discard
"{"cmd" : "initialise_leaderCards", "firstCard" : x, "secondCard" : y}"
---------------------------------------------------->
4
send the resources to choose (based on the position)
"{"cmd" : "initialise_resources", "firstResource" : x, "secondResource" : y}"
---------------------------------------------------->
5
 shift resources
"{"cmd" : "shift_resources", "source" : x, "destination" : y}"
------------------------------------------------------------>
6
choose marbles
"{"cmd" : "choose_marbles", "dimension" : str, "index" : x}"
------------------------------------------------------------>
7
choose leader card to use
"{"cmd" : "choose_leaderCard", "index" : x}"
------------------------------------------------------------>
8
select shelf
"{"cmd" : "insert_in_warehouse", "shelf" : x}"
------------------------------------------------------------>
9
choose card
"{"cmd" : "choose_card", "color" : str, "level" : x}"
------------------------------------------------------------>
10
select position
"{"cmd" : "select_position", "dashboardPosition" : x}"
------------------------------------------------------------>
11
select resources from warehouse
"{"cmd" : "select resources from warehouse" , "resources from warehouse" : x//DA CHIEDERE}"(BISOGNA CAPIRE COME MANDARE UNA COLLECTION RESOURCES)
------------------------------------------------------------>
12
production
"{"cmd" : "production"}"
------------------------------------------------------------>
13
"{"cmd" : "basic_production" , "firstResource" : x , "secondResource" : y , "toPayFirstFromWarehouse" : boolean , "toPaySecondFromWarehouse" : boolean , "output" : resource}"
------------------------------------------------------------>
14
"{"cmd" : "normal_production" , "position" : x , "ToPayFromWarehouse" : collectionResources}"
------------------------------------------------------------>
15
"{"cmd" : "leader_production" , "position" : x , "fromWarehouse" boolean}"
------------------------------------------------------------>
16
"{"cmd" : "end_production"}"
------------------------------------------------------------>
17
"{"cmd" : "leader_action"}"
------------------------------------------------------------>
18
"{"cmd" : "leader_action_activate", "toActivate" : int}"
------------------------------------------------------------>
19
"{"cmd" : "leader_action_discard", "toDiscard" : int}"
------------------------------------------------------------>

positions(for all players), marbleMarket, CardsMarket, leaderCards
, int representing the active leaderCards of a player (for all players),
int representing the total leaderCards (for all players),
int representing the total cards in dashBoard,
int representing the total resources of a player,
pope favour tiles,
CollectionResources representing the warehouse,
CollectionResources representing the strongbox


